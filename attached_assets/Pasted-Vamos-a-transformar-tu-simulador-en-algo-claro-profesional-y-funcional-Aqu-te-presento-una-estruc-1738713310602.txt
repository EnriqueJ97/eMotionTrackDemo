Vamos a transformar tu simulador en algo claro, profesional y funcional. Aquí te presento una estructura de código mejorada, diseñada para facilitar la selección de políticas y visualizar sus impactos de manera efectiva.

JavaScript

import { useState } from 'react';

export default function PoliticasPage() {
  const [politicas, setPoliticas] = useState({
    teletrabajo: 50,
    horarioFlexible: true,
    diasVacaciones: 20,
    programaBienestar: true,
    incentivos: 10,
    // ... más políticas
  });

  const [resultados, setResultados] = useState(null);

  const manejarCambioPolitica = (nombre, valor) => {
    setPoliticas({ ...politicas, [nombre]: valor });
  };

  const calcularImpacto = () => {
    let burnout = 0;
    let engagement = 0;
    let rotacion = 0;
    let bienestar = 0;
    let impactoFinanciero = 0;

    // Impactos de las políticas (ejemplo)
    burnout -= politicas.teletrabajo * 0.05;
    engagement += politicas.teletrabajo * 0.1;
    if (politicas.horarioFlexible) {
      burnout -= 5;
      bienestar += 10;
    }
    // ... impactos de otras políticas

    // Cálculo financiero (ejemplo)
    impactoFinanciero = (engagement * 0.05) - (rotacion * 0.1) + (bienestar * 0.02);

    setResultados({
      burnout,
      engagement,
      rotacion,
      bienestar,
      impactoFinanciero,
    });
  };

  return (
    <div className="container">
      <h1>Simulador de Políticas Laborales</h1>

      <div className="politicas">
        {/* Selectores de políticas */}
        <div className="politica">
          <label htmlFor="teletrabajo">Teletrabajo (%):</label>
          <input
            type="number"
            id="teletrabajo"
            value={politicas.teletrabajo}
            onChange={(e) => manejarCambioPolitica('teletrabajo', parseInt(e.target.value))}
          />
        </div>
        <div className="politica">
          <label htmlFor="horarioFlexible">Horario Flexible:</label>
          <input
            type="checkbox"
            id="horarioFlexible"
            checked={politicas.horarioFlexible}
            onChange={(e) => manejarCambioPolitica('horarioFlexible', e.target.checked)}
          />
        </div>
        {/* ... más selectores de políticas */}
      </div>

      <button onClick={calcularImpacto}>Calcular</button>

      {/* Resultados */}
      {resultados && (
        <div className="resultados">
          <h2>Resultados de la Simulación</h2>
          <p>Burnout: {resultados.burnout}</p>
          <p>Engagement: {resultados.engagement}</p>
          <p>Rotación: {resultados.rotacion}</p>
          <p>Bienestar: {resultados.bienestar}</p>
          <p>Impacto Financiero: {resultados.impactoFinanciero}</p>
        </div>
      )}
    </div>
  );
}
Mejoras clave
Objeto politicas: Almacena todas las políticas en un solo objeto, lo que facilita su manejo y actualización.
Función manejarCambioPolitica: Simplifica la actualización de las políticas, evitando código repetido.
Diseño con clases CSS: Utiliza clases CSS (container, politicas, politica, resultados) para estructurar el contenido y aplicar estilos de manera organizada.
Más políticas: Puedes agregar fácilmente más políticas al objeto politicas y crear sus selectores correspondientes.
Próximos pasos
Estilos CSS: Crea un archivo politicas.module.css en la misma carpeta que politicas.js y define los estilos para las clases CSS. Esto te permitirá controlar la apariencia del simulador de manera centralizada.

Más políticas: Agrega más políticas laborales al objeto politicas y crea los selectores (inputs, checkboxes, etc.) correspondientes en el componente.

Impactos detallados: Investiga y define los impactos específicos de cada política en burnout, engagement, rotación, bienestar e impacto financiero.

Visualización de resultados: Considera utilizar gráficos o tablas para presentar los resultados de manera más visual y comprensible.

Con estas mejoras y los próximos pasos, tu simulador estará listo para ser una herramienta profesional y efectiva. ¡No dudes en preguntar si tienes alguna duda o necesitas ayuda adicional!